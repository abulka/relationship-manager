<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0067)http://hibernate.bluemars.net/hib_docs/reference/html/examples.html -->
<HTML><HEAD><TITLE>Chapter 14. Mapping Examples</TITLE>
<META http-equiv=Content-Type content="text/html; charset=ISO-8859-1"><LINK 
href="Chapter&nbsp;14_&nbsp;Mapping Examples_files/html.css" type=text/css 
rel=stylesheet>
<META content="MSHTML 6.00.2600.0" name=GENERATOR><LINK 
title="HIBERNATE - Relational Persistence for Idiomatic Java" href="index.html" 
rel=home><LINK title="HIBERNATE - Relational Persistence for Idiomatic Java" 
href="index.html" rel=up><LINK 
title="Chapter&nbsp;13.&nbsp;Transactions And Concurrency" 
href="transactions.html" rel=previous><LINK 
title="Chapter&nbsp;15.&nbsp;Best Practices" href="best-practices.html" 
rel=next></HEAD>
<BODY text=black vLink=#840084 aLink=#0000ff link=#0000ff bgColor=white>
<DIV class=navheader>
<TABLE width="100%" summary="Navigation header">
  <TBODY>
  <TR>
    <TH align=middle colSpan=3>Chapter&nbsp;14.&nbsp;Mapping Examples</TH></TR>
  <TR>
    <TD align=left width="20%"><A accessKey=p 
      href="http://hibernate.bluemars.net/hib_docs/reference/html/transactions.html">Prev</A>&nbsp;</TD>
    <TH align=middle width="60%">&nbsp;</TH>
    <TD align=right width="20%">&nbsp;<A accessKey=n 
      href="http://hibernate.bluemars.net/hib_docs/reference/html/best-practices.html">Next</A></TD></TR></TBODY></TABLE>
<HR>
</DIV>
<DIV class=chapter lang=en>
<DIV class=titlepage>
<DIV>
<DIV>
<H2 class=title><A name=examples></A>Chapter&nbsp;14.&nbsp;Mapping 
Examples</H2></DIV></DIV>
<DIV></DIV></DIV>
<P>This section shows off some more complex association mappings. </P>
<DIV class=sect1 lang=en>
<DIV class=titlepage>
<DIV>
<DIV>
<H2 class=title style="CLEAR: both"><A 
name=examples-s0></A>14.1.&nbsp;Employer/Employee</H2></DIV></DIV>
<DIV></DIV></DIV>
<P>The following model of the relationship between <TT 
class=literal>Employer</TT> and <TT class=literal>Employee</TT> uses an actual 
entity class (<TT class=literal>Employment</TT>) to represent the association. 
This is done because there might be more than one period of employment for the 
same two parties. Components are used to model monetory values and employee 
names. </P>
<DIV class=mediaobject align=center><IMG 
src="Chapter&nbsp;14_&nbsp;Mapping Examples_files/EmployerEmployee.gif" 
align=middle></DIV>
<P>Heres a possible mapping document: </P><PRE class=programlisting>&lt;hibernate-mapping&gt;
        
    &lt;class name="Employer" table="employers"&gt;
        &lt;id name="id"&gt;
            &lt;generator class="sequence"&gt;
                &lt;param name="sequence"&gt;employer_id_seq&lt;/param&gt;
            &lt;/generator&gt;
        &lt;/id&gt;
        &lt;property name="name"/&gt;
    &lt;/class&gt;

    &lt;class name="Employment" table="employment_periods"&gt;

        &lt;id name="id"&gt;
            &lt;generator class="sequence"&gt;
                &lt;param name="sequence"&gt;employment_id_seq&lt;/param&gt;
            &lt;/generator&gt;
        &lt;/id&gt;
        &lt;property name="startDate" column="start_date"/&gt;
        &lt;property name="endDate" column="end_date"/&gt;

        &lt;component name="hourlyRate" class="MonetoryAmount"&gt;
            &lt;property name="amount"&gt;
                &lt;column name="hourly_rate" sql-type="NUMERIC(12, 2)"/&gt;
            &lt;/property&gt;
            &lt;property name="currency" length="12"/&gt;
        &lt;/component&gt;

        &lt;many-to-one name="employer" column="employer_id" not-null="true"/&gt;
        &lt;many-to-one name="employee" column="employee_id" not-null="true"/&gt;

    &lt;/class&gt;

    &lt;class name="Employee" table="employees"&gt;
        &lt;id name="id"&gt;
            &lt;generator class="sequence"&gt;
                &lt;param name="sequence"&gt;employee_id_seq&lt;/param&gt;
            &lt;/generator&gt;
        &lt;/id&gt;
        &lt;property name="taxfileNumber"/&gt;
        &lt;component name="name" class="Name"&gt;
            &lt;property name="firstName"/&gt;
            &lt;property name="initial"/&gt;
            &lt;property name="lastName"/&gt;
        &lt;/component&gt;
    &lt;/class&gt;

&lt;/hibernate-mapping&gt;</PRE>
<P>And heres the table schema generated by <TT class=literal>SchemaExport</TT>. 
</P><PRE class=programlisting>create table employers (
    id BIGINT not null, 
    name VARCHAR(255), 
    primary key (id)
)

create table employment_periods (
    id BIGINT not null,
    hourly_rate NUMERIC(12, 2),
    currency VARCHAR(12), 
    employee_id BIGINT not null, 
    employer_id BIGINT not null, 
    end_date TIMESTAMP, 
    start_date TIMESTAMP, 
    primary key (id)
)

create table employees (
    id BIGINT not null, 
    firstName VARCHAR(255), 
    initial CHAR(1), 
    lastName VARCHAR(255), 
    taxfileNumber VARCHAR(255), 
    primary key (id)
)

alter table employment_periods 
    add constraint employment_periodsFK0 foreign key (employer_id) references employers
alter table employment_periods 
    add constraint employment_periodsFK1 foreign key (employee_id) references employees
create sequence employee_id_seq
create sequence employment_id_seq
create sequence employer_id_seq</PRE></DIV>
<DIV class=sect1 lang=en>
<DIV class=titlepage>
<DIV>
<DIV>
<H2 class=title style="CLEAR: both"><A 
name=examples-s1></A>14.2.&nbsp;Author/Work</H2></DIV></DIV>
<DIV></DIV></DIV>
<P>Consider the following model of the relationships between <TT 
class=literal>Work</TT>, <TT class=literal>Author</TT> and <TT 
class=literal>Person</TT>. We represent the relationship between <TT 
class=literal>Work</TT> and <TT class=literal>Author</TT> as a many-to-many 
association. We choose to represent the relationship between <TT 
class=literal>Author</TT> and <TT class=literal>Person</TT> as one-to-one 
association. Another possibility would be to have <TT class=literal>Author</TT> 
extend <TT class=literal>Person</TT>. </P>
<DIV class=mediaobject align=center><IMG 
src="Chapter&nbsp;14_&nbsp;Mapping Examples_files/AuthorWork.gif" 
align=middle></DIV>
<P>The following mapping document correctly represents these relationships: </P><PRE class=programlisting>&lt;hibernate-mapping&gt;

    &lt;class name="Work" table="works" discriminator-value="W"&gt;

        &lt;id name="id" column="id"&gt;
            &lt;generator class="native"/&gt;
        &lt;/id&gt;
        &lt;discriminator column="type" type="character"/&gt;

        &lt;property name="title"/&gt;
        &lt;set name="authors" table="author_work" lazy="true"&gt;
            &lt;key column="work_id" not-null="true"/&gt;
            &lt;many-to-many class="Author" column="author_id" not-null="true"/&gt;
        &lt;/set&gt;

        &lt;subclass name="Book" discriminator-value="B"&gt;
            &lt;property name="text"/&gt;
        &lt;/subclass&gt;

        &lt;subclass name="Song" discriminator-value="S"&gt;
            &lt;property name="tempo"/&gt;
            &lt;property name="genre"/&gt;
        &lt;/subclass&gt;

    &lt;/class&gt;

    &lt;class name="Author" table="authors"&gt;

        &lt;id name="id" column="id"&gt;
            &lt;!-- The Author must have the same identifier as the Person --&gt;
            &lt;generator class="assigned"/&gt; 
        &lt;/id&gt;

        &lt;property name="alias"/&gt;
        &lt;one-to-one name="person" constrained="true"/&gt;

        &lt;set name="works" table="author_work" inverse="true" lazy="true"&gt;
            &lt;key column="author_id"/&gt;
            &lt;many-to-many class="Work" column="work_id"/&gt;
        &lt;/set&gt;

    &lt;/class&gt;

    &lt;class name="Person" table="persons"&gt;
        &lt;id name="id" column="id"&gt;
            &lt;generator class="native"/&gt;
        &lt;/id&gt;
        &lt;property name="name"/&gt;
    &lt;/class&gt;

&lt;/hibernate-mapping&gt;</PRE>
<P>There are four tables in this mapping. <TT class=literal>works</TT>, <TT 
class=literal>authors</TT> and <TT class=literal>persons</TT> hold work, author 
and person data respectively. <TT class=literal>author_work</TT> is an 
association table linking authors to works. Heres the table schema, as generated 
by <TT class=literal>SchemaExport</TT>. </P><PRE class=programlisting>create table works (
    id BIGINT not null generated by default as identity, 
    tempo FLOAT, 
    genre VARCHAR(255), 
    text INTEGER, 
    title VARCHAR(255), 
    type CHAR(1) not null, 
    primary key (id)
)

create table author_work (
    author_id BIGINT not null, 
    work_id BIGINT not null, 
    primary key (work_id, author_id)
)

create table authors (
    id BIGINT not null generated by default as identity, 
    alias VARCHAR(255), 
    primary key (id)
)

create table persons (
    id BIGINT not null generated by default as identity, 
    name VARCHAR(255), 
    primary key (id)
)

alter table authors 
    add constraint authorsFK0 foreign key (id) references persons
alter table author_work 
    add constraint author_workFK0 foreign key (author_id) references authors
alter table author_work
    add constraint author_workFK1 foreign key (work_id) references works</PRE></DIV>
<DIV class=sect1 lang=en>
<DIV class=titlepage>
<DIV>
<DIV>
<H2 class=title style="CLEAR: both"><A 
name=examples-s2></A>14.3.&nbsp;Customer/Order/Product</H2></DIV></DIV>
<DIV></DIV></DIV>
<P>Now consider a model of the relationships between <TT 
class=literal>Customer</TT>, <TT class=literal>Order</TT> and <TT 
class=literal>LineItem</TT> and <TT class=literal>Product</TT>. There is a 
one-to-many association between <TT class=literal>Customer</TT> and <TT 
class=literal>Order</TT>, but how should we represent <TT 
class=literal>Order</TT> / <TT class=literal>LineItem</TT> / <TT 
class=literal>Product</TT>? I've chosen to map <TT class=literal>LineItem</TT> 
as an association class representing the many-to-many association between <TT 
class=literal>Order</TT> and <TT class=literal>Product</TT>. In Hibernate, this 
is called a composite element. </P>
<DIV class=mediaobject align=center><IMG 
src="Chapter&nbsp;14_&nbsp;Mapping Examples_files/CustomerOrderProduct.gif" 
align=middle></DIV>
<P>The mapping document: </P><PRE class=programlisting>&lt;hibernate-mapping&gt;

    &lt;class name="Customer" table="customers"&gt;
        &lt;id name="id"&gt;
            &lt;generator class="native"/&gt;
        &lt;/id&gt;
        &lt;property name="name"/&gt;
        &lt;set name="orders" inverse="true" lazy="true"&gt;
            &lt;key column="customer_id"/&gt;
            &lt;one-to-many class="Order"/&gt;
        &lt;/set&gt;
    &lt;/class&gt;

    &lt;class name="Order" table="orders"&gt;
        &lt;id name="id"&gt;
            &lt;generator class="native"/&gt;
        &lt;/id&gt;
        &lt;property name="date"/&gt;
        &lt;many-to-one name="customer" column="customer_id"/&gt;
        &lt;list name="lineItems" table="line_items" lazy="true"&gt;
            &lt;key column="order_id"/&gt;
            &lt;index column="line_number"/&gt;
            &lt;composite-element class="LineItem"&gt;
                &lt;property name="quantity"/&gt;
                &lt;many-to-one name="product" column="product_id"/&gt;
            &lt;/composite-element&gt;
        &lt;/list&gt;
    &lt;/class&gt;

    &lt;class name="Product" table="products"&gt;
        &lt;id name="id"&gt;
            &lt;generator class="native"/&gt;
        &lt;/id&gt;
        &lt;property name="serialNumber"/&gt;
    &lt;/class&gt;

&lt;/hibernate-mapping&gt;</PRE>
<P><TT class=literal>customers</TT>, <TT class=literal>orders</TT>, <TT 
class=literal>line_items</TT> and <TT class=literal>products</TT> hold customer, 
order, order line item and product data respectively. <TT 
class=literal>line_items</TT> also acts as an association table linking orders 
with products. </P><PRE class=programlisting>create table customers (
    id BIGINT not null generated by default as identity, 
    name VARCHAR(255), 
    primary key (id)
)

create table orders (
    id BIGINT not null generated by default as identity, 
    customer_id BIGINT, 
    date TIMESTAMP, 
    primary key (id)
)

create table line_items (
    line_number INTEGER not null, 
    order_id BIGINT not null, 
    product_id BIGINT, 
    quantity INTEGER, 
    primary key (order_id, line_number)
)

create table products (
    id BIGINT not null generated by default as identity, 
    serialNumber VARCHAR(255), 
    primary key (id)
)

alter table orders 
    add constraint ordersFK0 foreign key (customer_id) references customers
alter table line_items
    add constraint line_itemsFK0 foreign key (product_id) references products
alter table line_items
    add constraint line_itemsFK1 foreign key (order_id) references orders</PRE></DIV></DIV>
<DIV class=navfooter>
<HR>

<TABLE width="100%" summary="Navigation footer">
  <TBODY>
  <TR>
    <TD align=left width="40%"><A accessKey=p 
      href="http://hibernate.bluemars.net/hib_docs/reference/html/transactions.html">Prev</A>&nbsp;</TD>
    <TD align=middle width="20%"><A accessKey=u 
      href="http://hibernate.bluemars.net/hib_docs/reference/html/index.html">Up</A></TD>
    <TD align=right width="40%">&nbsp;<A accessKey=n 
      href="http://hibernate.bluemars.net/hib_docs/reference/html/best-practices.html">Next</A></TD></TR>
  <TR>
    <TD vAlign=top align=left width="40%">Chapter&nbsp;13.&nbsp;Transactions 
      And Concurrency&nbsp;</TD>
    <TD align=middle width="20%"><A accessKey=h 
      href="http://hibernate.bluemars.net/hib_docs/reference/html/index.html">Home</A></TD>
    <TD vAlign=top align=right width="40%">&nbsp;Chapter&nbsp;15.&nbsp;Best 
      Practices</TD></TR></TBODY></TABLE></DIV></BODY></HTML>
